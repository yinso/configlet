// Generated by CoffeeScript 1.10.0
(function() {
  var AppError, ArgvVarPath, Schema, env, normalize, parseArgv,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  parseArgv = require('minimist');

  Schema = require('schemalet');

  AppError = require('errorlet');

  env = require('./env');

  ArgvVarPath = (function(superClass) {
    extend(ArgvVarPath, superClass);

    function ArgvVarPath() {
      return ArgvVarPath.__super__.constructor.apply(this, arguments);
    }

    ArgvVarPath.prototype.push = function(path) {
      return new ArgvVarPath(path);
    };

    ArgvVarPath.prototype.getValue = function(argv) {
      var name;
      name = this.toString();
      if (argv.hasOwnProperty(name)) {
        return argv[name];
      }
      return void 0;
    };

    ArgvVarPath.prototype.toString = function() {
      var current, res;
      res = [];
      current = this;
      while (current) {
        if (current.path !== '') {
          res.unshift(current.path);
        }
        current = current.prev;
      }
      return res.join('.');
    };

    return ArgvVarPath;

  })(env.EnvVarPath);

  normalize = function(schema, argv) {
    var normalized;
    if (argv == null) {
      argv = process.argv;
    }
    normalized = parseArgv(argv);
    return env.normalize(schema, argv(new ArgvVarPath()));
  };

  module.exports = {
    normalize: normalize
  };

}).call(this);
